name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME=wechat-steps
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME+='.exe'
        fi
        go build -v -o ${BINARY_NAME} .

    - name: Compress binary
      run: |
        ARCHIVE_NAME=wechat-steps-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip ${ARCHIVE_NAME}.zip wechat-steps.exe
        else
          tar czf ${ARCHIVE_NAME}.tar.gz wechat-steps
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: wechat-steps-${{ matrix.goos }}-${{ matrix.goarch }}
        path: wechat-steps*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const { repo: { owner, repo }, sha } = context;
          
          for (let artifact of await fs.readdir('.')) {
            const files = await fs.readdir(artifact);
            for (let file of files) {
              console.log('Uploading', `${artifact}/${file}`);
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: ${{ steps.create_release.outputs.id }},
                name: file,
                data: await fs.readFile(`${artifact}/${file}`)
              });
            }
          }

